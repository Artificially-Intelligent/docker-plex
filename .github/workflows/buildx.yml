name: buildx

on:
  workflow_dispatch:
  schedule:
    - cron: "0 21 * * 5"
  push:
    branches:
      - 'master'
  pull_request:

env:
  DOCKERHUB_USER: slink42
  IMAGE_NAME: slink42/plex
  APP_VER: 1.29.0.6244-test

jobs:
  buildx:
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        plex-type: [latest]
    steps:
        # Needs to be updated to grab current plex version
      -
        name: Check if buildx required
        run: |
          if [ ${{ matrix.plex-type }} = "latest" ]; then
            NOVAR=1
          elif [ ${{ matrix.plex-type }} = "mod" ]; then
            NOVAR=2
          fi
          PLEX_VER=$(wget -q https://registry.hub.docker.com/v2/repositories/linuxserver/plex/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | grep version | awk -F: '{print $7}' | tail -n1 | cut -f3 -d'-')
          docker pull ${{ env.IMAGE_NAME }}:$PLEX_VER && X_SKIP=true || X_SKIP=false
          [[ $GITHUB_EVENT_NAME != "schedule" ]] && X_SKIP=false
          echo "X_SKIP=$X_SKIP" >> $GITHUB_ENV
          echo "APP_VER=$VER" >> $GITHUB_ENV
          
          echo "-----------------"
          echo $GITHUB_ENV
          echo "-----------------"

      -
        name: Checkout
        if: env.X_SKIP == 'false'
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        if: env.X_SKIP == 'false'
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        if: env.X_SKIP == 'false'
        uses: docker/setup-buildx-action@v2
      -
        name: Initial Buildx
        if: env.X_SKIP == 'false'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}:testing
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            PLEX_TYPE=${{ matrix.plex-type }}
      # Load latest verion number of linuxserver/plex docker image and compare with latest slink42/plex
      -
        name: Load Built Image and Get Variables
        if: env.X_SKIP == 'false'
        id: vars
        run: |
          docker buildx build \
            -t ${{ env.IMAGE_NAME }}:testing \
            --platform=linux/amd64 \
            --build-arg PLEX_TYPE=${{ matrix.plex-type }} \
            --load \
            .
          CID=$(docker run -d ${{ env.IMAGE_NAME }}:testing)
          VER=$(wget -q https://registry.hub.docker.com/v1/repositories/linuxserver/plex/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}' | tail -n1 | cut -f2 -d'-')
          docker rm -f $CID
          echo "APP_VER=$VER" >> $GITHUB_ENV
          echo "-----------------"
          echo $GITHUB_ENV
          echo "-----------------"
          echo ::set-output name=github_desc::$(curl -sX GET https://api.github.com/repos/${GITHUB_REPOSITORY} | jq -r .description)
      -
        name: Login to docker.io
        if: env.X_SKIP == 'false'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      -
        name: Login to ghcr.io
        if: env.X_SKIP == 'false'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Buildx and Push
        if: env.X_SKIP == 'false'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.plex-type }}
            ${{ env.IMAGE_NAME }}:${{ env.APP_VER }}
            ghcr.io/${{ env.IMAGE_NAME }}:${{ matrix.plex-type }}
            ghcr.io/${{ env.IMAGE_NAME }}:${{ env.APP_VER }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            PLEX_TYPE=${{ matrix.plex-type }}
          push: true
      -
        name: Update Dockerhub description
        if: env.X_SKIP == 'false'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
          repository: ${{ env.IMAGE_NAME }}
          short-description: ${{ steps.vars.outputs.github_desc }}
      - 
        name: Notify Telegram
        uses: yanzay/notify-telegram@v0.1.0
        if: env.X_SKIP == 'false' && always()
        with:
          chat: ${{ secrets.TELEGRAM_CHAT }} # user id or channel name secret
          token: ${{ secrets.TELEGRAM_TOKEN }} # token secret
          status: ${{ job.status }} # do not modify this line

  buildx-on-pr:
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        plex-type: [latest]
    steps:
        # Needs to be updated to grab current plex version
      -
        name: Check if buildx required
        run: |
          if [ ${{ matrix.plex-type }} = "latest" ]; then
            NOVAR=1
          elif [ ${{ matrix.plex-type }} = "mod" ]; then
            NOVAR=2
          fi
          PLEX_VER=$(wget -q https://registry.hub.docker.com/v2/repositories/linuxserver/plex/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | grep version | awk -F: '{print $7}' | tail -n1 | cut -f3 -d'-')
          docker pull ${{ env.IMAGE_NAME }}:$PLEX_VER && X_SKIP=true || X_SKIP=false
          [[ $GITHUB_EVENT_NAME != "schedule" ]] && X_SKIP=false
          echo "X_SKIP=$X_SKIP" >> $GITHUB_ENV
          echo "APP_VER=$VER" >> $GITHUB_ENV
      -
        name: Checkout
        if: env.X_SKIP == 'false'
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        if: env.X_SKIP == 'false'
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        if: env.X_SKIP == 'false'
        uses: docker/setup-buildx-action@v2
      -
        name: Initial Buildx
        if: env.X_SKIP == 'false'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}:testing
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            PLEX_TYPE=${{ matrix.plex-type }}
      -
        name: Login to docker.io
        if: env.X_SKIP == 'false' && github.actor == github.event.repository.owner.login
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      -
        name: Login to ghcr.io
        if: env.X_SKIP == 'false' && github.actor == github.event.repository.owner.login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Buildx and Push
        if: env.X_SKIP == 'false' && github.actor == github.event.repository.owner.login
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:testing-${{ matrix.plex-type }}
            ${{ env.IMAGE_NAME }}:testing-${{ matrix.plex-type }}-${{ github.event.pull_request.number }}
            ghcr.io/${{ env.IMAGE_NAME }}:testing-${{ matrix.plex-type }}
            ghcr.io/${{ env.IMAGE_NAME }}:testing-${{ matrix.plex-type }}-${{ github.event.pull_request.number }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            PLEX_TYPE=${{ matrix.plex-type }}
          push: true
      - 
        name: Notify Telegram
        uses: yanzay/notify-telegram@v0.1.0
        if: env.X_SKIP == 'false' && always() && github.actor == github.event.repository.owner.login
        with:
          chat: ${{ secrets.TELEGRAM_CHAT }} # user id or channel name secret
          token: ${{ secrets.TELEGRAM_TOKEN }} # token secret
          status: ${{ job.status }} # do not modify this line